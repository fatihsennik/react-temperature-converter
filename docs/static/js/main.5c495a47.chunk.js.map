{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","tempreatureUnits","key","text","value","useState","value1","setValue1","value2","setValue2","valueConvert","setValueConvert","useEffect","getUserCurrentLocation","navigator","geolocation","watchPosition","position","a","Axios","post","params","lon","coords","longitude","lat","latitude","appid","units","lang","data","main","temp","getCurrentLocationWeather","showError","alert","error","errorText","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","className","style","marginTop","width","data-icon","data-size","data-show-count","href","cursor","onClick","type","onChange","e","target","placeholder","Dropdown","event","button","floating","labeled","icon","options","search","convertedValue","Number","calculatedValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5c495a47.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {Dropdown} from 'semantic-ui-react';\nimport GitHubButton from 'react-github-btn';\nimport Axios from \"axios\";\n\nconst App = () => {\n\n\n    const KEY = \"90ff367b18d766348e8b06101d8bd380\";\n\n    const tempreatureUnits = [\n        {key: 'Celsius', text: 'Celsius [°C]', value: 'Celsius'},\n        {key: 'Fahrenheit', text: 'Fahrenheit [°F]', value: 'Fahrenheit'},\n        {key: 'Kelvin', text: 'Kelvin [K]', value: 'Kelvin'},\n        {key: 'Rankine', text: 'Rankine [°Ra]', value: 'Rankine'},\n        {key: 'Réaumur', text: 'Réaumur [°Re]', value: 'Réaumur'},\n    ]\n\n    const [value1, setValue1] = useState('Celsius');\n    const [value2, setValue2] = useState('Select Unit');\n    const [valueConvert, setValueConvert] = useState(0);\n\n    useEffect(() => {\n        getUserCurrentLocation();\n    }, []);\n\n    const getUserCurrentLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.watchPosition((position) => {\n                const getCurrentLocationWeather = async () => {\n                    const {data} = await Axios.post(\n                        'https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather',\n                        {},\n                        {\n                            params: {\n                                lon: position.coords.longitude,\n                                lat: position.coords.latitude,\n                                appid: KEY,\n                                units: \"metric\",\n                                lang: \"en\"\n                            },\n                        }\n                    );\n                    setValueConvert(data.main.temp);\n                };\n                getCurrentLocationWeather();\n            }, showError);\n        } else {\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n    }\n\n    const showError = (error) => {\n        let errorText = \"Unknown Error\";\n        switch (error.code) {\n            case error.PERMISSION_DENIED:\n                errorText = \"User denied the request for Geolocation.\"\n                break;\n            case error.POSITION_UNAVAILABLE:\n                errorText = \"Location information is unavailable.\"\n                break;\n            case error.TIMEOUT:\n                errorText = \"The request to get user location timed out.\"\n                break;\n            case error.UNKNOWN_ERROR:\n                errorText = \"An unknown error occurred.\"\n                break;\n        }\n        alert(errorText);\n    }\n\n    const swapOperation = () => {\n        setValue1(value2);\n        setValue2(value1);\n    }\n\n    const calculatedValue = () => {\n\n        let convertedValue = 0;\n\n        //======================= Celsius ============================\n        if (value1 === \"Celsius\" && value2 === \"Celsius\") {\n            convertedValue = Number(valueConvert);\n        }\n        if (value1 === \"Celsius\" && value2 === \"Fahrenheit\") {\n            convertedValue = 1.8 * Number(valueConvert) + 32;\n        }\n        if (value1 === \"Celsius\" && value2 === \"Kelvin\") {\n            convertedValue = Number(valueConvert) + 273;\n        }\n        if (value1 === \"Celsius\" && value2 === \"Rankine\") {\n            convertedValue = (Number(valueConvert) + 273.15) * 1.8;\n        }\n        if (value1 === \"Celsius\" && value2 === \"Réaumur\") {\n            convertedValue = Number(valueConvert) * 0.8;\n        }\n\n        //======================= Fahrenheit =========================\n        if (value1 === \"Fahrenheit\" && value2 === \"Fahrenheit\") {\n            convertedValue = Number(valueConvert);\n        }\n        if (value1 === \"Fahrenheit\" && value2 === \"Celsius\") {\n            convertedValue = (Number(valueConvert) - 32) * 5 / 9;\n        }\n        if (value1 === \"Fahrenheit\" && value2 === \"Kelvin\") {\n            convertedValue = (Number(valueConvert) + 459.67) * 5 / 9;\n        }\n        if (value1 === \"Fahrenheit\" && value2 === \"Rankine\") {\n            convertedValue = Number(valueConvert) + 459.67;\n        }\n        if (value1 === \"Fahrenheit\" && value2 === \"Réaumur\") {\n            convertedValue = (Number(valueConvert) - 32) * 4 / 9;\n        }\n\n        //======================= KELVIN =============================\n        if (value1 === \"Kelvin\" && value2 === \"Kelvin\") {\n            convertedValue = Number(valueConvert);\n        }\n        if (value1 === \"Kelvin\" && value2 === \"Celsius\") {\n            convertedValue = Number(valueConvert) - 273.15;\n        }\n        if (value1 === \"Kelvin\" && value2 === \"Fahrenheit\") {\n            convertedValue = (Number(valueConvert) * 9 / 5) - 459.67;\n        }\n        if (value1 === \"Kelvin\" && value2 === \"Rankine\") {\n            convertedValue = Number(valueConvert) * 9 / 5;\n        }\n        if (value1 === \"Kelvin\" && value2 === \"Réaumur\") {\n            convertedValue = (Number(valueConvert) - 273.15) * 4 / 5;\n        }\n\n        //======================= Rankine =============================\n        if (value1 === \"Rankine\" && value2 === \"Rankine\") {\n            convertedValue = Number(valueConvert);\n        }\n        if (value1 === \"Rankine\" && value2 === \"Celsius\") {\n            convertedValue = (Number(valueConvert) - 491.67) * 5 / 9;\n        }\n        if (value1 === \"Rankine\" && value2 === \"Fahrenheit\") {\n            convertedValue = Number(valueConvert) - 459.67;\n        }\n        if (value1 === \"Rankine\" && value2 === \"Kelvin\") {\n            convertedValue = Number(valueConvert) * 5 / 9;\n        }\n        if (value1 === \"Rankine\" && value2 === \"Réaumur\") {\n            convertedValue = (Number(valueConvert) - 491.67) * 4 / 9;\n        }\n\n        //======================= Rankine =============================\n        if (value1 === \"Réaumur\" && value2 === \"Réaumur\") {\n            convertedValue = Number(valueConvert);\n        }\n        if (value1 === \"Réaumur\" && value2 === \"Celsius\") {\n            convertedValue = Number(valueConvert) * 5 / 4;\n        }\n        if (value1 === \"Réaumur\" && value2 === \"Fahrenheit\") {\n            convertedValue = (Number(valueConvert) * 9 / 4) + 32;\n        }\n        if (value1 === \"Réaumur\" && value2 === \"Kelvin\") {\n            convertedValue = (Number(valueConvert) * 5 / 4) + 273.15;\n        }\n        if (value1 === \"Réaumur\" && value2 === \"Rankine\") {\n            convertedValue = (Number(valueConvert) * 9 / 4) + 491.67;\n        }\n\n        return convertedValue;\n    }\n\n\n    return (\n        <div>\n\n            <div className=\"ui raised very padded container segment\" style={{marginTop: \"10px\", width: \"930px\"}}>\n\n                <GitHubButton data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\"\n                              href=\"https://github.com/senniksoft/react-temperature-converter\">Giving Star helps your brother :)\n                </GitHubButton>\n                <h2 className=\"ui header block aligned icon center\">\n                    <div className=\"ui pointing below label\">\n                        Click to swap.\n                    </div>\n                    <i style={{cursor: \"pointer\"}} className=\"circular exchange icon\"\n                       onClick={() => swapOperation()}></i>\n                    React Temperature Converter\n                </h2>\n\n                <div className=\"ui message\">\n                    <div className=\"header\">\n                        Note\n                    </div>\n                    <p>Please Enable Location Permission in your browser so that app gets your current geolocation's temperature.\n                        Temperature converter which automatically converts between Celsius, Fahrenheit, Kelvin, Rankine and Réaumur.\n                    </p>\n                </div>\n\n                <div className=\"ui placeholder segment\">\n\n                    <div className=\"ui two column stackable very relaxed grid\">\n\n                        <div className=\"ui vertical divider\">\n                            {value1 === \"Select Unit\" ? \"\" : value1} To {value2 === \"Select Unit\" ? \"\" : value2}\n                        </div>\n\n                        <div className=\"middle aligned column\">\n                            <div className=\"ui form\">\n                                <div className=\"field\">\n                                    <div className=\"ui pointing below label\">\n                                        Your Current Location Temperature in Celcius\n                                    </div>\n                                    <div className=\"ui input focus \">\n                                        <input type=\"number\" onChange={(e) => setValueConvert(e.target.value)}\n                                               value={valueConvert} placeholder=\"Value to convert\"/>\n                                    </div>\n                                </div>\n                                <div className=\"field\">\n                                    <Dropdown\n                                        onChange={(event, data) => setValue1(data.value)}\n                                        button\n                                        className='icon'\n                                        floating\n                                        labeled\n                                        icon='caret down'\n                                        options={tempreatureUnits}\n                                        search\n                                        text={value1}\n\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div className=\"middle aligned column\">\n                            <div className=\"ui form\">\n                                <div className=\"field\">\n                                    <div className=\"ui label big\">\n                                        {calculatedValue()}\n                                    </div>\n                                </div>\n                                <div className=\"field\">\n                                    <Dropdown\n                                        onChange={(event, data) => setValue2(data.value)}\n                                        button\n                                        className='icon'\n                                        floating\n                                        labeled\n                                        icon='caret down'\n                                        options={tempreatureUnits}\n                                        search\n                                        text={value2}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"ui bottom left attached label\">Developer Fatih Şennik <a\n                    href=\"mailto:info@fatihsennik.com\"> info@fatihsennik.com</a></div>\n            </div>\n\n        </div>\n\n    );\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}